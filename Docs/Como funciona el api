## Como funciona el API

El API utilizado en el proyecto de la aplicación meteorológica para Android desarrollado en Kotlin se comunica con el servicio de OpenWeatherMap para obtener datos meteorológicos en tiempo real. La interacción con el API se realiza mediante solicitudes HTTP utilizando la biblioteca Volley. A continuación, se describe cómo se realiza esta comunicación con el API:

**Solicitud de Datos Meteorológicos:** Para solicitar datos meteorológicos, se construye una URL que incluye la latitud y longitud de la ubicación deseada, así como la clave API proporcionada por OpenWeatherMap. Esta URL se utiliza para realizar una solicitud GET al API.

> val API_KEY = "117cfab279a9db71a83a7ed656ac50e2"
> var url = "https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}"
> Uso de Volley para Realizar la Solicitud: Se utiliza la biblioteca Volley para enviar la solicitud HTTP al API. Volley maneja la solicitud en un hilo secundario y devuelve la respuesta en el hilo principal, lo que permite actualizar la interfaz de usuario con los datos recibidos sin bloquear la aplicación.
> val jsonRequest = JsonObjectRequest(
>     Request.Method.GET, url, null,
>     Response.Listener { response ->
>         setValues(response)
>     },
>     Response.ErrorListener { Toast.makeText(this, "ERROR", Toast.LENGTH_LONG).show() })
> queue.add(jsonRequest)

**Procesamiento de la Respuesta:** Una vez que se recibe la respuesta del API, se extraen los datos meteorológicos del objeto JSON retornado. Estos datos incluyen información como el nombre de la ciudad, las coordenadas, la temperatura actual, la presión atmosférica, la humedad, y más. Luego, estos datos se utilizan para actualizar los elementos de la interfaz de usuario correspondientes.

> private fun setValues(response:JSONObject){
>     // Extracción de datos del objeto JSON y actualización de la UI
>     city.text=response.getString("name")
>     coordinates.text="${lat} , ${long}"
>     weather.text=response.getJSONArray("weather").getJSONObject(0).getString("main")
>     // Más extracciones y actualizaciones...
> }

**Permisos y Ubicación:** La aplicación solicita permisos de ubicación al usuario para obtener la latitud y longitud actuales, que son necesarios para realizar la solicitud al API. Esto se maneja en la clase StarScreeen.kt, que verifica los permisos y, si están concedidos, obtiene la última ubicación conocida del dispositivo.

> if(CheckPermission()) {
>     if(LocationEnable()){
>         mfusedlocation.lastLocation.addOnCompleteListener{
>             task->
>             var location:Location?=task.result
>             if(location==null) {
>                 NewLocation()
>             } else {
>                 // Iniciar MainActivity con los datos de latitud y longitud
>             }
>         }
>     } else {
>         Toast.makeText(this,"Por favor Enciende Tu GPS",Toast.LENGTH_LONG).show()
>     }
> } else {
>     RequestPermission()
> }

[Desarrollo de proyecto en Kotlin para Android](Docs/README.md)
